<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="ssm.dao.UserMapper">
	<resultMap id="BaseResultMap" type="ssm.model.User">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="name" property="name" jdbcType="VARCHAR" />
		<result column="pwd" property="pwd" jdbcType="VARCHAR" />
		<result column="nickname" property="nickname" jdbcType="VARCHAR" />
		<result column="img" property="img" jdbcType="VARCHAR" />
		<result column="createtime" property="createtime" jdbcType="TIMESTAMP" />
		<result column="state" property="state" jdbcType="INTEGER" />
	</resultMap>
	<sql id="Base_Column_List">
		id, name, pwd, nickname, img, createtime, state
	</sql>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from user
		where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from user
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<insert id="insert" parameterType="ssm.model.User">
		insert into user (id, name, pwd,
		nickname, img, createtime,
		state)
		values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR},
		#{pwd,jdbcType=VARCHAR},
		#{nickname,jdbcType=VARCHAR}, #{img,jdbcType=VARCHAR}, #{createtime,jdbcType=TIMESTAMP},
		#{state,jdbcType=INTEGER})
	</insert>
	<insert id="insertSelective" parameterType="ssm.model.User">
		insert into user
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="name != null">
				name,
			</if>
			<if test="pwd != null">
				pwd,
			</if>
			<if test="nickname != null">
				nickname,
			</if>
			<if test="img != null">
				img,
			</if>
			<if test="createtime != null">
				createtime,
			</if>
			<if test="state != null">
				state,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="name != null">
				#{name,jdbcType=VARCHAR},
			</if>
			<if test="pwd != null">
				#{pwd,jdbcType=VARCHAR},
			</if>
			<if test="nickname != null">
				#{nickname,jdbcType=VARCHAR},
			</if>
			<if test="img != null">
				#{img,jdbcType=VARCHAR},
			</if>
			<if test="createtime != null">
				#{createtime,jdbcType=TIMESTAMP},
			</if>
			<if test="state != null">
				#{state,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="ssm.model.User">
		update user
		<set>
			<if test="name != null">
				name = #{name,jdbcType=VARCHAR},
			</if>
			<if test="pwd != null">
				pwd = #{pwd,jdbcType=VARCHAR},
			</if>
			<if test="nickname != null">
				nickname = #{nickname,jdbcType=VARCHAR},
			</if>
			<if test="img != null">
				img = #{img,jdbcType=VARCHAR},
			</if>
			<if test="createtime != null">
				createtime = #{createtime,jdbcType=TIMESTAMP},
			</if>
			<if test="state != null">
				state = #{state,jdbcType=INTEGER},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="ssm.model.User">
		update user
		set name = #{name,jdbcType=VARCHAR},
		pwd = #{pwd,jdbcType=VARCHAR},
		nickname = #{nickname,jdbcType=VARCHAR},
		img = #{img,jdbcType=VARCHAR},
		createtime = #{createtime,jdbcType=TIMESTAMP},
		state = #{state,jdbcType=INTEGER}
		where id = #{id,jdbcType=INTEGER}
	</update>

	<select id="getAll" resultMap="BaseResultMap" parameterType="Map">
            	   
		select * from user 
		<where>
			<if test="search != null and search != ''">
				( id like '%${search}%' or name like '%${search}%' or nickname like '%${search}%' or createtime like '%${search}%' )
			</if>
			<if test="params.searchId != null and params.searchId != ''">
				and id like '%${params.searchId}%'
			</if>
			<if test="params.searchName != null and params.searchName != ''">
				and name like '%${params.searchName}%'
			</if>
			<if test="params.searchNcikName != null and params.searchNcikName != ''">
				and nickname like '%${params.searchNcikName}%'
			</if>
			<if test="params.searchCreatetime != null and params.searchCreatetime != ''">
				and createtime like '%${params.searchCreatetime}%'
			</if>
		</where>
		<if test="sort !=null and sort !=''">
			order by ${sort} ${order}
		</if>
		limit ${offset},${limit}
	</select>
	
	<select id="getCount" resultType="java.lang.Integer"> 
		select count(*) from user 
		<where>
			<if test="search != null and search != ''">
				( id like '%${search}%' or name like '%${search}%' or nickname like '%${search}%' or createtime like '%${search}%' )
			</if>
			<if test="params.searchId != null and params.searchId != ''">
				and id like '%${params.searchId}%'
			</if>
			<if test="params.searchName != null and params.searchName != ''">
				and name like '%${params.searchName}%'
			</if>
			<if test="params.searchNcikName != null and params.searchNcikName != ''">
				and nickname like '%${params.searchNcikName}%'
			</if>
			<if test="params.searchCreatetime != null and params.searchCreatetime != ''">
				and createtime like '%${params.searchCreatetime}%'
			</if>
		</where>
	</select>
	
	<resultMap type="ssm.model.User" id="userRoleResultMap" extends="BaseResultMap">
		<collection property="roles" ofType="ssm.model.Role">
			<id property="id" column="id"/>
			<result property="name" column="name"/>
		</collection>
	</resultMap>
	
	<select id="getRoleById" resultMap="userRoleResultMap">
		SELECT
			id,
			name
		FROM
			role
		
	</select>
	
	
	<resultMap type="ssm.model.Permission" id="permissionResultMap" extends="BaseResultMap">
			<id property="id" column="id"/>
			<result property="name" column="name"/>
			<result property="describe" column="describe"/>
			<result property="state" column="state"/>
			<result property="flevel" column="flevel"/>
			<result property="url" column="url"/>
	</resultMap>
	
	<select id="getAllPerm" resultMap="permissionResultMap">
		SELECT * FROM Permission
	</select>
	
	<resultMap type="ssm.model.User" id="aRoleResultMap" extends="BaseResultMap">
		
			<id property="id" column="id"/>
			<result property="name" column="name"/>

	</resultMap>
	
	
	<insert id="addurole" parameterType="java.lang.Integer">
		INSERT INTO user_role(userid, roleid) VALUES (${uid}, ${uname})
	</insert>
	
	
	<select id="isrole" resultMap="aRoleResultMap">
		SELECT roleid id, userid name FROM user_role
		where userid = ${userid}

	</select>
	
	<select id="getRoleCount" resultType="java.lang.Integer">
		SELECT
			count(*)
		FROM
			role
	</select>
	
	<delete id="delurole" parameterType="java.lang.Integer">
		delete from user_role
		where userid = ${uid} and roleid = ${uname}
	</delete>
	
	
	
	
	<select id="getRoleUser" parameterType="ssm.model.User" resultMap="BaseResultMap">
		select distinct user.name from user  INNER JOIN user_role
	ON user.id = user_role.userid  where user_role.roleid = ${userid}
	</select>
	
	
	<select id="Login" parameterType="ssm.model.User" resultMap="BaseResultMap">
		select * from user where name = #{name} and pwd = #{pwd}
	</select>
	
	<delete id="delete" parameterType="list">
		delete from user where id in
        <foreach collection="list" item="ids"  open="(" separator="," close=")">     
        	#{ids}
    	</foreach> 
	</delete>

</mapper>